import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;
import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;
import org.apache.jmeter.samplers.SampleResult;

import javax.jms.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;

public class JMSRequestReplySampler extends AbstractJavaSamplerClient {

    // JMS Resources
    private Connection connection;
    private Session session;
    private MessageProducer requestProducer;
    private MessageConsumer replyConsumer;

    // Tracking
    private final ConcurrentHashMap<String, SampleData> pendingRequests = new ConcurrentHashMap<>();
    private final ExecutorService responseProcessingPool = Executors.newFixedThreadPool(20);

    // Configuration parameters
    private static final String MQ_BROKER_URL = "mq.broker.url";
    private static final String REQUEST_QUEUE = "request.queue";
    private static final String REPLY_QUEUE = "reply.queue";
    private static final String TIMEOUT_MS = "timeout.ms";

    private static class SampleData {
        final long sentTime;
        final SampleResult sampleResult;

        SampleData(long sentTime, SampleResult sampleResult) {
            this.sentTime = sentTime;
            this.sampleResult = sampleResult;
        }
    }

    @Override
    public void setupTest(JavaSamplerContext context) {
        try {
            // Initialize JMS Connection
            ConnectionFactory factory = new org.apache.activemq.ActiveMQConnectionFactory(
                context.getParameter(MQ_BROKER_URL, "tcp://localhost:61616"));
            
            connection = factory.createConnection();
            connection.start();

            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            // Create producer
            requestProducer = session.createProducer(
                session.createQueue(context.getParameter(REQUEST_QUEUE, "REQUEST.QUEUE")));
            requestProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

            // Create consumer
            replyConsumer = session.createConsumer(
                session.createQueue(context.getParameter(REPLY_QUEUE, "REPLY.QUEUE")));

            // Start listener thread
            new Thread(this::listenForResponses).start();

        } catch (Exception e) {
            throw new RuntimeException("JMS initialization failed", e);
        }
    }

    @Override
    public SampleResult runTest(JavaSamplerContext context) {
        SampleResult result = new SampleResult();
        result.sampleStart();

        try {
            // Create TextMessage
            TextMessage message = session.createTextMessage();
            
            // PLACEHOLDER: Set your message content here
            message.setText("your message content");
            
            // PLACEHOLDER: Extract/generate clientReference
            String clientReference = extractClientReference(message);
            
            // Set correlation ID
            message.setJMSCorrelationID(clientReference);
            result.setSampleLabel(clientReference);

            // Send message
            requestProducer.send(message);
            pendingRequests.put(clientReference, new SampleData(System.currentTimeMillis(), result));

            // Wait for response
            long timeout = Long.parseLong(context.getParameter(TIMEOUT_MS, "5000"));
            long startTime = System.currentTimeMillis();
            
            while (System.currentTimeMillis() - startTime < timeout) {
                if (!pendingRequests.containsKey(clientReference)) {
                    return result; // Response received
                }
                Thread.sleep(100);
            }

            // Timeout handling
            pendingRequests.remove(clientReference);
            result.sampleEnd();
            result.setSuccessful(false);
            result.setResponseMessage("Timeout waiting for response");

        } catch (Exception e) {
            result.sampleEnd();
            result.setSuccessful(false);
            result.setResponseMessage("Exception: " + e.getMessage());
        }

        return result;
    }

    private void listenForResponses() {
        while (!Thread.currentThread().isInterrupted()) {
            try {
                Message message = replyConsumer.receive(1000);
                if (message != null && message instanceof TextMessage) {
                    responseProcessingPool.execute(() -> processResponse((TextMessage) message));
                }
            } catch (Exception e) {
                if (!Thread.currentThread().isInterrupted()) {
                    getLogger().error("Response listener error", e);
                }
            }
        }
    }

    private void processResponse(TextMessage response) {
        try {
            // PLACEHOLDER: Extract clientReference from response
            String clientReference = extractClientReference(response);
            
            SampleData sampleData = pendingRequests.remove(clientReference);
            if (sampleData == null) return;

            // Calculate processing time
            long processingTime = System.currentTimeMillis() - sampleData.sentTime;
            
            // Complete the sample
            SampleResult result = sampleData.sampleResult;
            result.sampleEnd();
            result.setSuccessful(true);
            result.setResponseMessage("Response received");
            result.setResponseData(response.getText(), "UTF-8");
            
            // PLACEHOLDER: Add any custom processing here

        } catch (Exception e) {
            getLogger().error("Error processing response", e);
        }
    }

    // PLACEHOLDER METHODS - IMPLEMENT YOUR CLIENT REFERENCE LOGIC HERE
    private String extractClientReference(TextMessage message) throws JMSException {
        // Implement your logic to extract/generate clientReference
        // Example: return message.getText() or parse JSON content
        return "implement-your-logic-here";
    }

    @Override
    public void teardownTest(JavaSamplerContext context) {
        try {
            responseProcessingPool.shutdownNow();
            if (replyConsumer != null) replyConsumer.close();
            if (requestProducer != null) requestProducer.close();
            if (session != null) session.close();
            if (connection != null) connection.close();
        } catch (Exception e) {
            getLogger().error("Cleanup error", e);
        }
    }

    @Override
    public org.apache.jmeter.config.Arguments getDefaultParameters() {
        org.apache.jmeter.config.Arguments params = new org.apache.jmeter.config.Arguments();
        params.addArgument(MQ_BROKER_URL, "tcp://localhost:61616");
        params.addArgument(REQUEST_QUEUE, "REQUEST.QUEUE");
        params.addArgument(REPLY_QUEUE, "REPLY.QUEUE");
        params.addArgument(TIMEOUT_MS, "5000");
        return params;
    }
}
