import com.ibm.mq.jms.MQConnectionFactory;
import javax.jms.*;
import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;
import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;
import org.apache.jmeter.samplers.SampleResult;

import java.time.Instant;
import java.time.Duration;
import java.util.concurrent.ConcurrentHashMap;

public class IBMMQSampler extends AbstractJavaSamplerClient {

    // Store reference to sent messages based on clientReferenceId and timestamp
    private static ConcurrentHashMap<String, Instant> requestMap = new ConcurrentHashMap<>();

    // Parameterized values for IBM MQ connection
    private String queueManager;
    private String hostname;
    private int port;
    private String channel;
    private String message;
    private String requestQueueName;
    private String responseQueueName;

    // IBM MQ connection factory and queue configurations
    private MQConnectionFactory connectionFactory;
    private Queue requestQueue;
    private Queue responseQueue;

    @Override
    public void setupTest(JavaSamplerContext context) {
        // Get parameters from JMeter test plan
        queueManager = context.getParameter("queueManager", "QM1");
        hostname = context.getParameter("hostname", "localhost");
        port = context.getIntParameter("port", 1414);
        channel = context.getParameter("channel", "SYSTEM.DEF.SVRCONN");
        message = context.getParameter("message", "Default Message Content");
        requestQueueName = context.getParameter("requestQueue", "REQUEST.QUEUE");
        responseQueueName = context.getParameter("responseQueue", "RESPONSE.QUEUE");

        // Initialize IBM MQ Connection Factory and Queues
        try {
            connectionFactory = new MQConnectionFactory();
            connectionFactory.setHostName(hostname);
            connectionFactory.setPort(port);
            connectionFactory.setQueueManager(queueManager);
            connectionFactory.setChannel(channel);
            connectionFactory.setTransportType(JMSC.MQJMS_TP_CLIENT_MQ_TCPIP);

            requestQueue = new com.ibm.mq.jms.MQQueue(requestQueueName);
            responseQueue = new com.ibm.mq.jms.MQQueue(responseQueueName);
        } catch (JMSException e) {
            e.printStackTrace();
        }
    }

    @Override
    public SampleResult runTest(JavaSamplerContext context) {
        SampleResult result = new SampleResult();
        result.sampleStart();  // Start timing the sample

        Connection connection = null;
        Session session = null;

        try {
            // Create connection and session
            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            // Choose either Producer or Consumer Mode based on the context parameter
            String mode = context.getParameter("mode");

            if ("producer".equalsIgnoreCase(mode)) {
                sendMessages(connection, session, 80000);  // Producer: send 80,000 messages
            } else if ("consumer".equalsIgnoreCase(mode)) {
                startConsumer(connection, session);      // Consumer: process messages and calculate time difference
            }

            result.setSuccessful(true);
        } catch (Exception e) {
            result.setSuccessful(false);
            result.setResponseMessage(e.toString());
            e.printStackTrace();
        } finally {
            result.sampleEnd();  // End timing the sample
            // Close resources manually
            try {
                if (session != null) session.close();
                if (connection != null) connection.close();
            } catch (JMSException e) {
                e.printStackTrace();
            }
        }

        return result;
    }

    // Function to send multiple messages with unique clientReferenceId
    public void sendMessages(Connection connection, Session session, int totalMessages) throws JMSException {
        MessageProducer producer = null;

        try {
            producer = session.createProducer(requestQueue);

            // Loop to send 80,000 messages
            for (int i = 1; i <= totalMessages; i++) {
                String clientReferenceId = "ClientRef-" + i;
                String messageContent = message + " for " + clientReferenceId;
                Instant sentTime = Instant.now();  // Record the time the message is sent

                // Store the clientReferenceId and sent time in the map
                requestMap.put(clientReferenceId, sentTime);

                // Create a new text message
                TextMessage textMessage = session.createTextMessage(messageContent);

                // Set clientReferenceId and sentTimestamp in the message properties
                textMessage.setStringProperty("clientReferenceId", clientReferenceId);
                textMessage.setLongProperty("sentTimestamp", sentTime.toEpochMilli());

                // Send the message
                producer.send(textMessage);

                // Log progress for every 10,000 messages sent
                if (i % 10000 == 0) {
                    System.out.println("Sent " + i + " messages.");
                }
            }

            System.out.println("Finished sending " + totalMessages + " messages.");
        } finally {
            if (producer != null) {
                producer.close();  // Close producer
            }
        }
    }

    // Function to start a consumer that listens for messages and calculates time difference
    public void startConsumer(Connection connection, Session session) throws JMSException {
        MessageConsumer consumer = null;

        try {
            // Create a consumer for the request queue
            consumer = session.createConsumer(requestQueue);
            connection.start();  // Start connection to listen for messages

            // Start consuming messages
            for (int i = 0; i < 80000; i++) {
                // Receive message from the request queue
                Message message = consumer.receive(5000);  // 5 seconds timeout
                if (message instanceof TextMessage) {
                    TextMessage textMessage = (TextMessage) message;

                    // Retrieve clientReferenceId and sentTimestamp
                    String clientReferenceId = textMessage.getStringProperty("clientReferenceId");
                    long sentTimestamp = textMessage.getLongProperty("sentTimestamp");

                    // Calculate time difference between sent and received time
                    Instant sentTime = Instant.ofEpochMilli(sentTimestamp);
                    Instant receivedTime = Instant.now();
                    Duration timeDifference = Duration.between(sentTime, receivedTime);

                    // Log the result (this can be enhanced to store in a CSV or summary log)
                    System.out.println("ClientReferenceId: " + clientReferenceId + 
                                       ", Sent: " + sentTime + 
                                       ", Received: " + receivedTime + 
                                       ", Time Difference: " + timeDifference.toMillis() + " ms");

                    // Acknowledge the message after successful processing
                    message.acknowledge();
                }
            }
        } finally {
            if (consumer != null) {
                consumer.close();  // Close consumer
            }
        }
    }

    // JMeter teardown
    @Override
    public void teardownTest(JavaSamplerContext context) {
        System.out.println("Test finished.");
    }
}
