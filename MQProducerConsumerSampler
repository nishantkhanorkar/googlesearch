package com.example.jmeter.mqplugin;

import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;
import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;
import org.apache.jmeter.samplers.SampleResult;

import javax.jms.*;
import com.ibm.mq.jms.MQQueueConnectionFactory;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class MQProducerConsumerSampler extends AbstractJavaSamplerClient {

    // MQ Connection Details
    private String queueManager;
    private String hostname;
    private int port;
    private String channel;
    private String requestQueue;
    private String responseQueue;
    private String clientReferenceId;
    private String message;
    private int numberOfMessages;

    // JMS objects
    private Connection connection;
    private Session session;
    private MessageProducer producer;
    private MessageConsumer consumer;
    private ExecutorService executor;

    // To store the time when each message was sent
    private Map<String, Long> sentMessages = new HashMap<>();

    @Override
    public void setupTest(JavaSamplerContext context) {
        queueManager = context.getParameter("queueManager");
        hostname = context.getParameter("hostname");
        port = Integer.parseInt(context.getParameter("port"));
        channel = context.getParameter("channel");
        requestQueue = context.getParameter("requestQueue");
        responseQueue = context.getParameter("responseQueue");
        clientReferenceId = context.getParameter("clientReferenceId");
        message = context.getParameter("message");
        numberOfMessages = Integer.parseInt(context.getParameter("numberOfMessages", "1")); // Default to 1

        try {
            MQQueueConnectionFactory factory = new MQQueueConnectionFactory();
            factory.setQueueManager(queueManager);
            factory.setHostName(hostname);
            factory.setPort(port);
            factory.setChannel(channel);
            factory.setTransportType(1);  // Bind to IBM MQ transport

            connection = factory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            Queue requestQ = session.createQueue(requestQueue);
            producer = session.createProducer(requestQ);

            Queue responseQ = session.createQueue(responseQueue);
            consumer = session.createConsumer(responseQ);

            executor = Executors.newFixedThreadPool(2); // Two threads: one for producer and one for consumer

        } catch (JMSException e) {
            e.printStackTrace();
        }
    }

    @Override
    public SampleResult runTest(JavaSamplerContext context) {
        SampleResult result = new SampleResult();
        result.setSampleLabel("IBM MQ Producer-Consumer Test");

        Map<String, Long> responseTimes = new HashMap<>();

        try {
            connection.start();  // Start connection for consumer
            result.sampleStart(); // Start tracking total time for all messages

            Callable<Void> producerTask = () -> {
                for (int i = 0; i < numberOfMessages; i++) {
                    String correlationId = clientReferenceId + "-" + i;
                    long messageStartTime = System.currentTimeMillis();
                    
                    TextMessage messageToSend = session.createTextMessage();
                    messageToSend.setText(String.format(message, i));
                    messageToSend.setJMSCorrelationID(correlationId);  // Unique correlation ID
                    
                    producer.send(messageToSend);
                    sentMessages.put(correlationId, messageStartTime); // Store start time with correlation ID
                }
                return null;
            };

            Callable<Void> consumerTask = () -> {
                for (int i = 0; i < numberOfMessages; i++) {
                    Message responseMessage = consumer.receive(5000);  // 5 seconds timeout
                    if (responseMessage != null && responseMessage instanceof TextMessage) {
                        String correlationId = responseMessage.getJMSCorrelationID();
                        long messageEndTime = System.currentTimeMillis();
                        Long messageStartTime = sentMessages.get(correlationId);
                        
                        if (messageStartTime != null) {
                            long responseTime = messageEndTime - messageStartTime; // Calculate time difference
                            responseTimes.put(correlationId, responseTime); // Store response time with correlation ID
                        }
                    }
                }
                return null;
            };

            Future<Void> producerFuture = executor.submit(producerTask);
            Future<Void> consumerFuture = executor.submit(consumerTask);

            producerFuture.get();  // Wait for producer task to finish
            consumerFuture.get();  // Wait for consumer task to finish

            result.setSuccessful(true);
            result.sampleEnd(); // End tracking total time

            // Calculate average response time
            long totalResponseTime = responseTimes.values().stream().mapToLong(Long::longValue).sum();
            long averageResponseTime = totalResponseTime / numberOfMessages;

            // Set response data to show number of messages and average response time
            result.setResponseData("Number of messages: " + numberOfMessages +
                                   ", Average response time (ms): " + averageResponseTime, "UTF-8");

        } catch (Exception e) {
            result.setSuccessful(false);
            result.setResponseMessage("Exception: " + e.getMessage());
        }

        return result;
    }

    @Override
    public void teardownTest(JavaSamplerContext context) {
        try {
            if (producer != null) producer.close();
            if (consumer != null) consumer.close();
            if (session != null) session.close();
            if (connection != null) connection.close();
            if (executor != null) executor.shutdown();
        } catch (JMSException e) {
            e.printStackTrace();
        }
    }
}
